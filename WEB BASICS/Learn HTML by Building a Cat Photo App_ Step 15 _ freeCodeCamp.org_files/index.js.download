(()=>{"use strict";function t({messenger:t,message:s}){return new Promise((e=>{const i=new MessageChannel;i.port1.onmessage=t=>{i.port1.close(),e(t.data)},t.postMessage(s,{targetOrigin:"*",transfer:[i.port2]})}))}const s=(t="/dist/")=>{const s=t.startsWith("/"),e=t.endsWith("/");return s||(t="/"+t),e||(t+="/"),t};class e{#t;#s;#e;#i({assetPath:t,script:e}){const i=document.createElement("iframe");return i.sandbox.add("allow-scripts","allow-forms"),i.allow="autoplay",i.id="test-frame",(t=>{t.style.position="absolute",t.style.left="-9999px",t.style.top="-9999px",t.style.visibility="hidden"})(i),{iframe:i,scriptHTML:`<script id='test-evaluator-script' src='${s(t)+e}'><\/script>`}}constructor(t){const{scriptHTML:s,iframe:e}=this.#i(t);this.#t=e,this.#s=s}async init(s,e){const{hooks:i}=s,n=i?.beforeAll?`<script id='test-evaluator-hooks'>\n${i.beforeAll}\n<\/script>`:"";this.#e=i?.afterAll;const r=new Promise(((t,s)=>{const i=setTimeout((()=>s(Error("Timed out waiting for the test frame to load"))),e),n=()=>{this.#t.removeEventListener("load",n),clearTimeout(i),t(!0)};this.#t.addEventListener("load",n)}));this.#t.srcdoc=`\n${this.#s}\n${n}\n${s.source}`,document.body.appendChild(this.#t),await r;const o={type:"init",value:s};await t({messenger:this.#t.contentWindow,message:o})}runTest(s){return t({messenger:this.#t.contentWindow,message:{type:"test",value:s}}).then((({value:t})=>t))}async#n(s){const e={type:"code",value:s};return t({messenger:this.#t.contentWindow,message:e})}async runAllTests(t){const s=[];for(const e of t){const t=await this.runTest(e);s.push(t)}return this.#e&&await this.#n(this.#e),s}dispose(){this.#t.remove()}}class i{#t;#r=null;#o;#a="";#i({assetPath:t,script:e}){return this.#a=s(t)+e,new Worker(this.#a)}constructor(t){this.#t=this.#i(t)}async init(s,e){this.#r=s,this.#o=e;const i={type:"init",value:s};let n;const r=new Promise(((t,s)=>{n=setTimeout((()=>s(new Error("Timed out waiting for the test worker to initialize"))),e)})),o=t({messenger:this.#t,message:i});await Promise.race([o,r]),clearTimeout(n)}async#c(){if(!this.#r||!this.#a)throw new Error("WorkerTestRunner not initialized");this.#t=new Worker(this.#a),await this.init(this.#r,this.#o)}async#n(s){const e={type:"code",value:s};return t({messenger:this.#t,message:e})}async runTest(s,e=5e3){let i;const n=new Promise((t=>{i=setTimeout((()=>{this.dispose(),this.#c().then((()=>{t({err:{message:"Test timed out"}})}))}),e)})),r={type:"test",value:s},o=t({messenger:this.#t,message:r}).then((({value:t})=>t));try{return await Promise.race([o,n])}finally{clearTimeout(i)}}async runAllTests(t,s=5e3){const e=[];for(const i of t){const t=await this.runTest(i,s);e.push(t)}return this.#r?.hooks?.afterAll&&await this.#n(this.#r.hooks.afterAll),e}dispose(){this.#t.terminate()}}window.FCCTestRunner=new class{#h;#l;#u;constructor(){this.#h=null,this.#l=null,this.#u=null}getRunner(t){switch(t){case"dom":return this.#h;case"javascript":return this.#l;case"python":return this.#u}}async createTestRunner({source:t,type:s,code:n,assetPath:r,hooks:o,loadEnzyme:a},{timeout:c}={timeout:2e4}){let h=null;switch(s){case"dom":this.#h||=new e({assetPath:r,script:"dom-test-evaluator.js"}),h=this.#h;break;case"javascript":this.#l||=new i({assetPath:r,script:"javascript-test-evaluator.js"}),h=this.#l;break;case"python":this.#u||=new i({assetPath:r,script:"python-test-evaluator.js"}),h=this.#u}return await h.init({code:n,source:t,loadEnzyme:a,hooks:o},c),h}}})();